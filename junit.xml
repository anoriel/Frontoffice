<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="392" failures="0" errors="0" time="3.812">
  <testsuite name="Agency Store" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="0.949" tests="3">
    <testcase classname="Agency Store Store Creation should create store instance" name="Agency Store Store Creation should create store instance" time="0.014">
    </testcase>
    <testcase classname="Agency Store Store Creation should expose reactive properties" name="Agency Store Store Creation should expose reactive properties" time="0.003">
    </testcase>
    <testcase classname="Agency Store API Integration should use agency API" name="Agency Store API Integration should use agency API" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Lead Type API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="0.949" tests="4">
    <testcase classname="Lead Type API findAll should call GET /lead_types without pagination" name="Lead Type API findAll should call GET /lead_types without pagination" time="0.011">
    </testcase>
    <testcase classname="Lead Type API findAll should handle errors when fetching lead types" name="Lead Type API findAll should handle errors when fetching lead types" time="0.014">
    </testcase>
    <testcase classname="Lead Type API should have correct baseUrl (note: appears to be incorrect in source)" name="Lead Type API should have correct baseUrl (note: appears to be incorrect in source)" time="0.001">
    </testcase>
    <testcase classname="Lead Type API should inherit base API methods" name="Lead Type API should inherit base API methods" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Society Store" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="0.99" tests="1">
    <testcase classname="Society Store Store Creation should create store instance" name="Society Store Store Creation should create store instance" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="Society API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="0.962" tests="4">
    <testcase classname="Society API findAllActive should call GET /societes with active filter and country ordering" name="Society API findAllActive should call GET /societes with active filter and country ordering" time="0.008">
    </testcase>
    <testcase classname="Society API findAllActive should handle errors when fetching active societies" name="Society API findAllActive should handle errors when fetching active societies" time="0.012">
    </testcase>
    <testcase classname="Society API should have baseUrl property" name="Society API should have baseUrl property" time="0.001">
    </testcase>
    <testcase classname="Society API should inherit base API methods" name="Society API should inherit base API methods" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="APIResponse Type" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="1.014" tests="11">
    <testcase classname="APIResponse Type Type Structure should have success property as boolean" name="APIResponse Type Type Structure should have success property as boolean" time="0.011">
    </testcase>
    <testcase classname="APIResponse Type Type Structure should have content property of generic type" name="APIResponse Type Type Structure should have content property of generic type" time="0.005">
    </testcase>
    <testcase classname="APIResponse Type Type Structure should have optional status property" name="APIResponse Type Type Structure should have optional status property" time="0.001">
    </testcase>
    <testcase classname="APIResponse Type Type Flexibility should work with array types" name="APIResponse Type Type Flexibility should work with array types" time="0.006">
    </testcase>
    <testcase classname="APIResponse Type Type Flexibility should work with complex object types" name="APIResponse Type Type Flexibility should work with complex object types" time="0.002">
    </testcase>
    <testcase classname="APIResponse Type Type Flexibility should work with null/undefined content" name="APIResponse Type Type Flexibility should work with null/undefined content" time="0.001">
    </testcase>
    <testcase classname="APIResponse Type Success/Error States should represent successful responses" name="APIResponse Type Success/Error States should represent successful responses" time="0">
    </testcase>
    <testcase classname="APIResponse Type Success/Error States should represent error responses" name="APIResponse Type Success/Error States should represent error responses" time="0.001">
    </testcase>
    <testcase classname="APIResponse Type HTTP Status Codes should support various HTTP status codes" name="APIResponse Type HTTP Status Codes should support various HTTP status codes" time="0.003">
    </testcase>
    <testcase classname="APIResponse Type Real-world Usage Examples should work with paginated API responses" name="APIResponse Type Real-world Usage Examples should work with paginated API responses" time="0.001">
    </testcase>
    <testcase classname="APIResponse Type Real-world Usage Examples should work with authentication responses" name="APIResponse Type Real-world Usage Examples should work with authentication responses" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Admin Routes" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="1.074" tests="14">
    <testcase classname="Admin Routes should be an array of route objects" name="Admin Routes should be an array of route objects" time="0.008">
    </testcase>
    <testcase classname="Admin Routes Admin Menu Route should have admin menu route" name="Admin Routes Admin Menu Route should have admin menu route" time="0.001">
    </testcase>
    <testcase classname="Admin Routes User Security Route should have user security route" name="Admin Routes User Security Route should have user security route" time="0.001">
    </testcase>
    <testcase classname="Admin Routes User Security Route should have correct icon" name="Admin Routes User Security Route should have correct icon" time="0.001">
    </testcase>
    <testcase classname="Admin Routes Currently Logged Users Route should have currently logged users route" name="Admin Routes Currently Logged Users Route should have currently logged users route" time="0.001">
    </testcase>
    <testcase classname="Admin Routes Currently Logged Users Route should have correct icon" name="Admin Routes Currently Logged Users Route should have correct icon" time="0.001">
    </testcase>
    <testcase classname="Admin Routes Security and Access Control should require ROLE_SUPER_ADMIN for all routes" name="Admin Routes Security and Access Control should require ROLE_SUPER_ADMIN for all routes" time="0.002">
    </testcase>
    <testcase classname="Admin Routes Security and Access Control should have icons for all routes" name="Admin Routes Security and Access Control should have icons for all routes" time="0.001">
    </testcase>
    <testcase classname="Admin Routes Menu Hierarchy should have proper parent-child relationships" name="Admin Routes Menu Hierarchy should have proper parent-child relationships" time="0">
    </testcase>
    <testcase classname="Admin Routes Menu Hierarchy should have dropdown menu properly configured" name="Admin Routes Menu Hierarchy should have dropdown menu properly configured" time="0">
    </testcase>
    <testcase classname="Admin Routes Route Configuration should have all required route properties" name="Admin Routes Route Configuration should have all required route properties" time="0.001">
    </testcase>
    <testcase classname="Admin Routes Route Configuration should have components for non-dropdown routes" name="Admin Routes Route Configuration should have components for non-dropdown routes" time="0">
    </testcase>
    <testcase classname="Admin Routes Administrative Functions should include user management functionality" name="Admin Routes Administrative Functions should include user management functionality" time="0.002">
    </testcase>
    <testcase classname="Admin Routes Administrative Functions should include session monitoring functionality" name="Admin Routes Administrative Functions should include session monitoring functionality" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Country API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="1.02" tests="4">
    <testcase classname="Country API findAll should call GET /pays with ISO ordering and no pagination" name="Country API findAll should call GET /pays with ISO ordering and no pagination" time="0.009">
    </testcase>
    <testcase classname="Country API findAll should handle errors when fetching countries" name="Country API findAll should handle errors when fetching countries" time="0.011">
    </testcase>
    <testcase classname="Country API should have correct baseUrl" name="Country API should have correct baseUrl" time="0.001">
    </testcase>
    <testcase classname="Country API should inherit base API methods" name="Country API should inherit base API methods" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Business Sector Store" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="1.049" tests="2">
    <testcase classname="Business Sector Store Store Creation should create store instance" name="Business Sector Store Store Creation should create store instance" time="0.025">
    </testcase>
    <testcase classname="Business Sector Store Store Creation should expose reactive properties" name="Business Sector Store Store Creation should expose reactive properties" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="HomeView.vue" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="1.229" tests="10">
    <testcase classname="HomeView.vue is a Vue component" name="HomeView.vue is a Vue component" time="0.015">
    </testcase>
    <testcase classname="HomeView.vue renders v-main container" name="HomeView.vue renders v-main container" time="0.007">
    </testcase>
    <testcase classname="HomeView.vue displays the correct heading" name="HomeView.vue displays the correct heading" time="0.001">
    </testcase>
    <testcase classname="HomeView.vue renders getLongRequest button" name="HomeView.vue renders getLongRequest button" time="0.003">
    </testcase>
    <testcase classname="HomeView.vue initializes count and btnDisabled correctly" name="HomeView.vue initializes count and btnDisabled correctly" time="0.001">
    </testcase>
    <testcase classname="HomeView.vue increments count when getLongRequest is called" name="HomeView.vue increments count when getLongRequest is called" time="0.047">
    </testcase>
    <testcase classname="HomeView.vue disables button during getLongRequest execution" name="HomeView.vue disables button during getLongRequest execution" time="0.021">
    </testcase>
    <testcase classname="HomeView.vue calls securityStore.getLongRequest when button is clicked" name="HomeView.vue calls securityStore.getLongRequest when button is clicked" time="0.013">
    </testcase>
    <testcase classname="HomeView.vue renders button with correct text including count" name="HomeView.vue renders button with correct text including count" time="0.004">
    </testcase>
    <testcase classname="HomeView.vue button is disabled when btnDisabled is true" name="HomeView.vue button is disabled when btnDisabled is true" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="TokenInfo (JWT Token Info)" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.241" tests="15">
    <testcase classname="TokenInfo (JWT Token Info) Constructor should create instance with default values when no rawData provided" name="TokenInfo (JWT Token Info) Constructor should create instance with default values when no rawData provided" time="0.016">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Constructor should create instance with provided rawData" name="TokenInfo (JWT Token Info) Constructor should create instance with provided rawData" time="0.006">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Constructor should handle partial rawData" name="TokenInfo (JWT Token Info) Constructor should handle partial rawData" time="0.002">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Constructor should handle null and undefined values" name="TokenInfo (JWT Token Info) Constructor should handle null and undefined values" time="0.001">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Constructor should handle empty strings and zero values" name="TokenInfo (JWT Token Info) Constructor should handle empty strings and zero values" time="0.002">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Constructor should handle empty arrays for roles" name="TokenInfo (JWT Token Info) Constructor should handle empty arrays for roles" time="0">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Constructor should handle null rawData" name="TokenInfo (JWT Token Info) Constructor should handle null rawData" time="0.001">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Property Types should set number properties correctly" name="TokenInfo (JWT Token Info) Property Types should set number properties correctly" time="0.001">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Property Types should set string properties correctly" name="TokenInfo (JWT Token Info) Property Types should set string properties correctly" time="0.001">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Property Types should set object/array properties correctly" name="TokenInfo (JWT Token Info) Property Types should set object/array properties correctly" time="0.001">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Inheritance should extend BaseModel" name="TokenInfo (JWT Token Info) Inheritance should extend BaseModel" time="0.005">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Inheritance should call parent constructor" name="TokenInfo (JWT Token Info) Inheritance should call parent constructor" time="0.001">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Real-world JWT Token scenarios should handle typical JWT payload structure" name="TokenInfo (JWT Token Info) Real-world JWT Token scenarios should handle typical JWT payload structure" time="0.001">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Real-world JWT Token scenarios should handle expired token data" name="TokenInfo (JWT Token Info) Real-world JWT Token scenarios should handle expired token data" time="0.001">
    </testcase>
    <testcase classname="TokenInfo (JWT Token Info) Real-world JWT Token scenarios should handle token with points system" name="TokenInfo (JWT Token Info) Real-world JWT Token scenarios should handle token with points system" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Global Store" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.297" tests="11">
    <testcase classname="Global Store Initial State should initialize with default values" name="Global Store Initial State should initialize with default values" time="0.004">
    </testcase>
    <testcase classname="Global Store Initial State should read perPage from sessionStorage" name="Global Store Initial State should read perPage from sessionStorage" time="0.002">
    </testcase>
    <testcase classname="Global Store Initial State should use default perPage when sessionStorage is null" name="Global Store Initial State should use default perPage when sessionStorage is null" time="0.001">
    </testcase>
    <testcase classname="Global Store setIsBackgroundLoading should increment counter when setting to true" name="Global Store setIsBackgroundLoading should increment counter when setting to true" time="0.002">
    </testcase>
    <testcase classname="Global Store setIsBackgroundLoading should decrement counter when setting to false" name="Global Store setIsBackgroundLoading should decrement counter when setting to false" time="0.002">
    </testcase>
    <testcase classname="Global Store setIsBackgroundLoading should set isBackgroundLoading to false when counter reaches 0" name="Global Store setIsBackgroundLoading should set isBackgroundLoading to false when counter reaches 0" time="0.001">
    </testcase>
    <testcase classname="Global Store setIsBackgroundLoading should handle negative counter by resetting to 0" name="Global Store setIsBackgroundLoading should handle negative counter by resetting to 0" time="0.001">
    </testcase>
    <testcase classname="Global Store setIsBackgroundLoading should allow going below 0" name="Global Store setIsBackgroundLoading should allow going below 0" time="0.001">
    </testcase>
    <testcase classname="Global Store setPerPage should set perPage value and save to sessionStorage" name="Global Store setPerPage should set perPage value and save to sessionStorage" time="0.001">
    </testcase>
    <testcase classname="Global Store setPerPage should handle different perPage values" name="Global Store setPerPage should handle different perPage values" time="0.002">
    </testcase>
    <testcase classname="Global Store Multiple background loading requests should handle multiple concurrent background loading requests" name="Global Store Multiple background loading requests should handle multiple concurrent background loading requests" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="CrmListSettingsDTO" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.321" tests="16">
    <testcase classname="CrmListSettingsDTO Constructor should create instance with default values when no rawData provided" name="CrmListSettingsDTO Constructor should create instance with default values when no rawData provided" time="0.004">
    </testcase>
    <testcase classname="CrmListSettingsDTO Constructor should create instance with default rawData structure" name="CrmListSettingsDTO Constructor should create instance with default rawData structure" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Constructor should set name when provided in rawData" name="CrmListSettingsDTO Constructor should set name when provided in rawData" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Constructor should set context when provided in rawData" name="CrmListSettingsDTO Constructor should set context when provided in rawData" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Constructor should set isPublic when provided in rawData" name="CrmListSettingsDTO Constructor should set isPublic when provided in rawData" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Constructor should set user when provided in rawData" name="CrmListSettingsDTO Constructor should set user when provided in rawData" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Constructor should handle all properties together" name="CrmListSettingsDTO Constructor should handle all properties together" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Constructor should not set properties when they are falsy" name="CrmListSettingsDTO Constructor should not set properties when they are falsy" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Constructor should handle null rawData" name="CrmListSettingsDTO Constructor should handle null rawData" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Constructor should handle undefined rawData" name="CrmListSettingsDTO Constructor should handle undefined rawData" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Inheritance should extend BaseModel" name="CrmListSettingsDTO Inheritance should extend BaseModel" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Inheritance should call parent constructor" name="CrmListSettingsDTO Inheritance should call parent constructor" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Property Setting Methods should use setString for name property" name="CrmListSettingsDTO Property Setting Methods should use setString for name property" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Property Setting Methods should use setObject for context property" name="CrmListSettingsDTO Property Setting Methods should use setObject for context property" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Property Setting Methods should use setBoolean for isPublic property" name="CrmListSettingsDTO Property Setting Methods should use setBoolean for isPublic property" time="0.001">
    </testcase>
    <testcase classname="CrmListSettingsDTO Property Setting Methods should use setObject for user property" name="CrmListSettingsDTO Property Setting Methods should use setObject for user property" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CRM List Settings API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.265" tests="5">
    <testcase classname="CRM List Settings API findItemsByType should call GET with type filter" name="CRM List Settings API findItemsByType should call GET with type filter" time="0.005">
    </testcase>
    <testcase classname="CRM List Settings API findItemsByType should handle different types" name="CRM List Settings API findItemsByType should handle different types" time="0">
    </testcase>
    <testcase classname="CRM List Settings API findItemsByType should handle errors when fetching items by type" name="CRM List Settings API findItemsByType should handle errors when fetching items by type" time="0.017">
    </testcase>
    <testcase classname="CRM List Settings API should have correct baseUrl" name="CRM List Settings API should have correct baseUrl" time="0">
    </testcase>
    <testcase classname="CRM List Settings API should inherit base API methods" name="CRM List Settings API should inherit base API methods" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="DatatableSortBy Interface" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.158" tests="14">
    <testcase classname="DatatableSortBy Interface OrderBy Type should accept &quot;asc&quot; value" name="DatatableSortBy Interface OrderBy Type should accept &quot;asc&quot; value" time="0.001">
    </testcase>
    <testcase classname="DatatableSortBy Interface OrderBy Type should accept &quot;desc&quot; value" name="DatatableSortBy Interface OrderBy Type should accept &quot;desc&quot; value" time="0">
    </testcase>
    <testcase classname="DatatableSortBy Interface OrderBy Type should be used in type checking" name="DatatableSortBy Interface OrderBy Type should be used in type checking" time="0.001">
    </testcase>
    <testcase classname="DatatableSortBy Interface DatatableSortBy Interface should have key property as string" name="DatatableSortBy Interface DatatableSortBy Interface should have key property as string" time="0">
    </testcase>
    <testcase classname="DatatableSortBy Interface DatatableSortBy Interface should have order property as OrderBy" name="DatatableSortBy Interface DatatableSortBy Interface should have order property as OrderBy" time="0.001">
    </testcase>
    <testcase classname="DatatableSortBy Interface DatatableSortBy Interface should work with different column names" name="DatatableSortBy Interface DatatableSortBy Interface should work with different column names" time="0.014">
    </testcase>
    <testcase classname="DatatableSortBy Interface Real-world Usage should work for user table sorting" name="DatatableSortBy Interface Real-world Usage should work for user table sorting" time="0.001">
    </testcase>
    <testcase classname="DatatableSortBy Interface Real-world Usage should work for product table sorting" name="DatatableSortBy Interface Real-world Usage should work for product table sorting" time="0.006">
    </testcase>
    <testcase classname="DatatableSortBy Interface Real-world Usage should work for date-based sorting" name="DatatableSortBy Interface Real-world Usage should work for date-based sorting" time="0.001">
    </testcase>
    <testcase classname="DatatableSortBy Interface Sorting Functions should be usable in sorting logic" name="DatatableSortBy Interface Sorting Functions should be usable in sorting logic" time="0.001">
    </testcase>
    <testcase classname="DatatableSortBy Interface Sorting Functions should work with multiple sort criteria" name="DatatableSortBy Interface Sorting Functions should work with multiple sort criteria" time="0">
    </testcase>
    <testcase classname="DatatableSortBy Interface Edge Cases should handle empty key" name="DatatableSortBy Interface Edge Cases should handle empty key" time="0">
    </testcase>
    <testcase classname="DatatableSortBy Interface Edge Cases should handle nested property keys" name="DatatableSortBy Interface Edge Cases should handle nested property keys" time="0.001">
    </testcase>
    <testcase classname="DatatableSortBy Interface Edge Cases should handle numeric-like keys" name="DatatableSortBy Interface Edge Cases should handle numeric-like keys" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="CRM Routes" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="1.486" tests="17">
    <testcase classname="CRM Routes should be an array of route objects" name="CRM Routes should be an array of route objects" time="0.006">
    </testcase>
    <testcase classname="CRM Routes CRM Menu Route should have CRM menu route" name="CRM Routes CRM Menu Route should have CRM menu route" time="0.002">
    </testcase>
    <testcase classname="CRM Routes Customer Routes should have customers list route" name="CRM Routes Customer Routes should have customers list route" time="0.002">
    </testcase>
    <testcase classname="CRM Routes Customer Routes should have correct props function for customers" name="CRM Routes Customer Routes should have correct props function for customers" time="0.001">
    </testcase>
    <testcase classname="CRM Routes Lead Routes should have lead dashboard route" name="CRM Routes Lead Routes should have lead dashboard route" time="0.002">
    </testcase>
    <testcase classname="CRM Routes Lead Routes should have lead list route" name="CRM Routes Lead Routes should have lead list route" time="0.016">
    </testcase>
    <testcase classname="CRM Routes Lead Routes should have correct props for lead list" name="CRM Routes Lead Routes should have correct props for lead list" time="0.001">
    </testcase>
    <testcase classname="CRM Routes Lead Routes should have lead page route with parameter" name="CRM Routes Lead Routes should have lead page route with parameter" time="0.001">
    </testcase>
    <testcase classname="CRM Routes CRM Settings Routes should have CRM settings menu route" name="CRM Routes CRM Settings Routes should have CRM settings menu route" time="0.001">
    </testcase>
    <testcase classname="CRM Routes CRM Settings Routes should have assignment rules route" name="CRM Routes CRM Settings Routes should have assignment rules route" time="0.002">
    </testcase>
    <testcase classname="CRM Routes CRM Settings Routes should have origins list route" name="CRM Routes CRM Settings Routes should have origins list route" time="0.008">
    </testcase>
    <testcase classname="CRM Routes CRM Settings Routes should have refusal reasons route" name="CRM Routes CRM Settings Routes should have refusal reasons route" time="0">
    </testcase>
    <testcase classname="CRM Routes Route Icons should have appropriate icons for routes" name="CRM Routes Route Icons should have appropriate icons for routes" time="0.001">
    </testcase>
    <testcase classname="CRM Routes Role-based Access should have role restrictions on all routes" name="CRM Routes Role-based Access should have role restrictions on all routes" time="0">
    </testcase>
    <testcase classname="CRM Routes Role-based Access should have valid role names" name="CRM Routes Role-based Access should have valid role names" time="0.001">
    </testcase>
    <testcase classname="CRM Routes Menu Hierarchy should have proper parent-child relationships" name="CRM Routes Menu Hierarchy should have proper parent-child relationships" time="0">
    </testcase>
    <testcase classname="CRM Routes Menu Hierarchy should have dropdown menus properly configured" name="CRM Routes Menu Hierarchy should have dropdown menus properly configured" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Service Domain API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.14" tests="2">
    <testcase classname="Service Domain API should have correct baseUrl" name="Service Domain API should have correct baseUrl" time="0.002">
    </testcase>
    <testcase classname="Service Domain API should inherit all base API methods" name="Service Domain API should inherit all base API methods" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Service Type API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.147" tests="2">
    <testcase classname="Service Type API should have correct baseUrl" name="Service Type API should have correct baseUrl" time="0.001">
    </testcase>
    <testcase classname="Service Type API should inherit all base API methods" name="Service Type API should inherit all base API methods" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Common Helper" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.295" tests="42">
    <testcase classname="Common Helper String Utilities capitalizeFirstLetter should capitalize first letter of string" name="Common Helper String Utilities capitalizeFirstLetter should capitalize first letter of string" time="0.003">
    </testcase>
    <testcase classname="Common Helper String Utilities capitalizeFirstLetter should handle empty or null strings" name="Common Helper String Utilities capitalizeFirstLetter should handle empty or null strings" time="0.001">
    </testcase>
    <testcase classname="Common Helper String Utilities lowercaseFirstLetter should lowercase first letter of string" name="Common Helper String Utilities lowercaseFirstLetter should lowercase first letter of string" time="0.001">
    </testcase>
    <testcase classname="Common Helper String Utilities initiale should return first letter uppercase" name="Common Helper String Utilities initiale should return first letter uppercase" time="0.001">
    </testcase>
    <testcase classname="Common Helper String Utilities padZero should pad with zeros to specified length" name="Common Helper String Utilities padZero should pad with zeros to specified length" time="0">
    </testcase>
    <testcase classname="Common Helper String Utilities padZero should use default length of 2" name="Common Helper String Utilities padZero should use default length of 2" time="0.003">
    </testcase>
    <testcase classname="Common Helper String Utilities sprintf should replace %s placeholders with arguments" name="Common Helper String Utilities sprintf should replace %s placeholders with arguments" time="0.001">
    </testcase>
    <testcase classname="Common Helper String Utilities sprintf should return original string if no arguments" name="Common Helper String Utilities sprintf should return original string if no arguments" time="0">
    </testcase>
    <testcase classname="Common Helper String Utilities numberToString should convert numbers to string words" name="Common Helper String Utilities numberToString should convert numbers to string words" time="0.001">
    </testcase>
    <testcase classname="Common Helper String Utilities numberToString should return &quot;none&quot; for numbers out of range" name="Common Helper String Utilities numberToString should return &quot;none&quot; for numbers out of range" time="0.008">
    </testcase>
    <testcase classname="Common Helper Type Checking isArray should correctly identify arrays" name="Common Helper Type Checking isArray should correctly identify arrays" time="0.001">
    </testcase>
    <testcase classname="Common Helper Type Checking isObject should correctly identify objects" name="Common Helper Type Checking isObject should correctly identify objects" time="0.001">
    </testcase>
    <testcase classname="Common Helper Type Checking isEmptyOrNull should correctly identify empty or null values" name="Common Helper Type Checking isEmptyOrNull should correctly identify empty or null values" time="0.001">
    </testcase>
    <testcase classname="Common Helper Object Utilities areObjectsEqual should compare objects correctly" name="Common Helper Object Utilities areObjectsEqual should compare objects correctly" time="0.001">
    </testcase>
    <testcase classname="Common Helper Object Utilities getDifference should return differences between objects" name="Common Helper Object Utilities getDifference should return differences between objects" time="0.001">
    </testcase>
    <testcase classname="Common Helper Object Utilities toString should convert various types to string" name="Common Helper Object Utilities toString should convert various types to string" time="0.001">
    </testcase>
    <testcase classname="Common Helper Object Utilities toString should handle objects with stringValue" name="Common Helper Object Utilities toString should handle objects with stringValue" time="0.001">
    </testcase>
    <testcase classname="Common Helper Object Utilities toString should handle complex objects" name="Common Helper Object Utilities toString should handle complex objects" time="0.001">
    </testcase>
    <testcase classname="Common Helper Array Utilities removeDuplicates should remove duplicate items from array" name="Common Helper Array Utilities removeDuplicates should remove duplicate items from array" time="0.001">
    </testcase>
    <testcase classname="Common Helper Array Utilities removeDuplicates should handle object arrays" name="Common Helper Array Utilities removeDuplicates should handle object arrays" time="0.001">
    </testcase>
    <testcase classname="Common Helper Array Utilities removeItemFromList should remove item from list by id" name="Common Helper Array Utilities removeItemFromList should remove item from list by id" time="0.001">
    </testcase>
    <testcase classname="Common Helper Array Utilities listWithSlots should add slot items to beginning of list" name="Common Helper Array Utilities listWithSlots should add slot items to beginning of list" time="0.001">
    </testcase>
    <testcase classname="Common Helper Date Utilities formatDate should format date correctly" name="Common Helper Date Utilities formatDate should format date correctly" time="0.001">
    </testcase>
    <testcase classname="Common Helper Date Utilities formatDate should return undefined for null/undefined values" name="Common Helper Date Utilities formatDate should return undefined for null/undefined values" time="0.006">
    </testcase>
    <testcase classname="Common Helper Date Utilities formatDateTime should format datetime correctly" name="Common Helper Date Utilities formatDateTime should format datetime correctly" time="0.001">
    </testcase>
    <testcase classname="Common Helper Date Utilities formatPeriod should format period correctly" name="Common Helper Date Utilities formatPeriod should format period correctly" time="0.001">
    </testcase>
    <testcase classname="Common Helper Date Utilities ExcelDateToJSDate should convert Excel serial date to JS Date" name="Common Helper Date Utilities ExcelDateToJSDate should convert Excel serial date to JS Date" time="0.001">
    </testcase>
    <testcase classname="Common Helper Date Utilities clearDate should clear date range" name="Common Helper Date Utilities clearDate should clear date range" time="0.001">
    </testcase>
    <testcase classname="Common Helper Crypto and Hash Functions getGravatarURL should generate gravatar URL" name="Common Helper Crypto and Hash Functions getGravatarURL should generate gravatar URL" time="0.001">
    </testcase>
    <testcase classname="Common Helper Crypto and Hash Functions getGravatarURL should use default parameters" name="Common Helper Crypto and Hash Functions getGravatarURL should use default parameters" time="0.004">
    </testcase>
    <testcase classname="Common Helper Crypto and Hash Functions getHexColor should generate hex color from ciphertext" name="Common Helper Crypto and Hash Functions getHexColor should generate hex color from ciphertext" time="0.001">
    </testcase>
    <testcase classname="Common Helper Crypto and Hash Functions getHexColor should handle special cases" name="Common Helper Crypto and Hash Functions getHexColor should handle special cases" time="0">
    </testcase>
    <testcase classname="Common Helper Deep Comparison and Diff deepCompareWithoutOrder should compare objects deeply without order consideration" name="Common Helper Deep Comparison and Diff deepCompareWithoutOrder should compare objects deeply without order consideration" time="0.002">
    </testcase>
    <testcase classname="Common Helper Deep Comparison and Diff deepDiffMapper should create diff mapper with correct methods" name="Common Helper Deep Comparison and Diff deepDiffMapper should create diff mapper with correct methods" time="0.001">
    </testcase>
    <testcase classname="Common Helper Deep Comparison and Diff deepDiffMapper should compare values correctly" name="Common Helper Deep Comparison and Diff deepDiffMapper should compare values correctly" time="0.001">
    </testcase>
    <testcase classname="Common Helper Deep Comparison and Diff deepDiffMapper should identify data types correctly" name="Common Helper Deep Comparison and Diff deepDiffMapper should identify data types correctly" time="0.001">
    </testcase>
    <testcase classname="Common Helper Utility Functions sleep should complete without error" name="Common Helper Utility Functions sleep should complete without error" time="0.006">
    </testcase>
    <testcase classname="Common Helper Utility Functions getHourFromDate should extract hour from date" name="Common Helper Utility Functions getHourFromDate should extract hour from date" time="0.001">
    </testcase>
    <testcase classname="Common Helper Utility Functions getHourFromDate should return undefined for null values" name="Common Helper Utility Functions getHourFromDate should return undefined for null values" time="0.001">
    </testcase>
    <testcase classname="Common Helper Utility Functions getObjectNameWithCountry should return country code with string value" name="Common Helper Utility Functions getObjectNameWithCountry should return country code with string value" time="0">
    </testcase>
    <testcase classname="Common Helper Utility Functions getObjectNameWithCountry should handle nested country object" name="Common Helper Utility Functions getObjectNameWithCountry should handle nested country object" time="0">
    </testcase>
    <testcase classname="Common Helper Utility Functions getObjectNameWithCountry should return undefined for invalid objects" name="Common Helper Utility Functions getObjectNameWithCountry should return undefined for invalid objects" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="NavBar.vue" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.501" tests="10">
    <testcase classname="NavBar.vue is a Vue component" name="NavBar.vue is a Vue component" time="0.002">
    </testcase>
    <testcase classname="NavBar.vue renders v-app-bar correctly" name="NavBar.vue renders v-app-bar correctly" time="0.002">
    </testcase>
    <testcase classname="NavBar.vue filters routes correctly" name="NavBar.vue filters routes correctly" time="0.003">
    </testcase>
    <testcase classname="NavBar.vue getChildren returns child routes correctly" name="NavBar.vue getChildren returns child routes correctly" time="0.001">
    </testcase>
    <testcase classname="NavBar.vue shows dropdown menus configuration" name="NavBar.vue shows dropdown menus configuration" time="0.002">
    </testcase>
    <testcase classname="NavBar.vue handles route access control" name="NavBar.vue handles route access control" time="0.001">
    </testcase>
    <testcase classname="NavBar.vue handles disabled routes correctly" name="NavBar.vue handles disabled routes correctly" time="0.002">
    </testcase>
    <testcase classname="NavBar.vue filters hidden routes" name="NavBar.vue filters hidden routes" time="0.002">
    </testcase>
    <testcase classname="NavBar.vue handles route metadata correctly" name="NavBar.vue handles route metadata correctly" time="0.002">
    </testcase>
    <testcase classname="NavBar.vue handles nested dropdown menus" name="NavBar.vue handles nested dropdown menus" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Lead Refusal Reason API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.155" tests="2">
    <testcase classname="Lead Refusal Reason API should have correct baseUrl" name="Lead Refusal Reason API should have correct baseUrl" time="0.002">
    </testcase>
    <testcase classname="Lead Refusal Reason API should inherit all base API methods" name="Lead Refusal Reason API should inherit all base API methods" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Lead API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.232" tests="9">
    <testcase classname="Lead API addLeadComment should create FormData and post lead comment with attachments" name="Lead API addLeadComment should create FormData and post lead comment with attachments" time="0.01">
    </testcase>
    <testcase classname="Lead API addLeadComment should create FormData and post lead comment without attachments" name="Lead API addLeadComment should create FormData and post lead comment without attachments" time="0.002">
    </testcase>
    <testcase classname="Lead API addLeadComment should handle errors when adding lead comment" name="Lead API addLeadComment should handle errors when adding lead comment" time="0.024">
    </testcase>
    <testcase classname="Lead API findItemsByType should call GET with leadType filter" name="Lead API findItemsByType should call GET with leadType filter" time="0.001">
    </testcase>
    <testcase classname="Lead API findItemsByType should handle errors when finding leads by type" name="Lead API findItemsByType should handle errors when finding leads by type" time="0.002">
    </testcase>
    <testcase classname="Lead API transformIntoProspect should call PATCH to transform lead into prospect" name="Lead API transformIntoProspect should call PATCH to transform lead into prospect" time="0.001">
    </testcase>
    <testcase classname="Lead API transformIntoProspect should handle errors when transforming lead" name="Lead API transformIntoProspect should handle errors when transforming lead" time="0.002">
    </testcase>
    <testcase classname="Lead API should have baseUrl property" name="Lead API should have baseUrl property" time="0">
    </testcase>
    <testcase classname="Lead API should inherit base API methods" name="Lead API should inherit base API methods" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Base Store" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.2" tests="27">
    <testcase classname="Base Store Initial State should initialize with default values" name="Base Store Initial State should initialize with default values" time="0.003">
    </testcase>
    <testcase classname="Base Store Initial State should have computed properties working correctly" name="Base Store Initial State should have computed properties working correctly" time="0.001">
    </testcase>
    <testcase classname="Base Store CRUD Operations findAll should fetch all items successfully" name="Base Store CRUD Operations findAll should fetch all items successfully" time="0.001">
    </testcase>
    <testcase classname="Base Store CRUD Operations findAll should handle findAll error" name="Base Store CRUD Operations findAll should handle findAll error" time="0.001">
    </testcase>
    <testcase classname="Base Store CRUD Operations find should find item by id successfully" name="Base Store CRUD Operations find should find item by id successfully" time="0.001">
    </testcase>
    <testcase classname="Base Store CRUD Operations find should handle find error" name="Base Store CRUD Operations find should handle find error" time="0.001">
    </testcase>
    <testcase classname="Base Store CRUD Operations deleteItem should delete item successfully" name="Base Store CRUD Operations deleteItem should delete item successfully" time="0.005">
    </testcase>
    <testcase classname="Base Store CRUD Operations deleteItem should handle delete error" name="Base Store CRUD Operations deleteItem should handle delete error" time="0.001">
    </testcase>
    <testcase classname="Base Store CRUD Operations save should save existing item (update)" name="Base Store CRUD Operations save should save existing item (update)" time="0.001">
    </testcase>
    <testcase classname="Base Store CRUD Operations save should save new item (create)" name="Base Store CRUD Operations save should save new item (create)" time="0.009">
    </testcase>
    <testcase classname="Base Store CRUD Operations save should handle save error" name="Base Store CRUD Operations save should handle save error" time="0.001">
    </testcase>
    <testcase classname="Base Store CRUD Operations save should process object properties with @id correctly" name="Base Store CRUD Operations save should process object properties with @id correctly" time="0.001">
    </testcase>
    <testcase classname="Base Store Pagination and Filtering findPage should fetch paginated results successfully" name="Base Store Pagination and Filtering findPage should fetch paginated results successfully" time="0.002">
    </testcase>
    <testcase classname="Base Store Pagination and Filtering findPage should handle findPage error" name="Base Store Pagination and Filtering findPage should handle findPage error" time="0.001">
    </testcase>
    <testcase classname="Base Store Pagination and Filtering findPage should call findPage with correct parameters" name="Base Store Pagination and Filtering findPage should call findPage with correct parameters" time="0.001">
    </testcase>
    <testcase classname="Base Store Utility Functions getById should find item by id in list" name="Base Store Utility Functions getById should find item by id in list" time="0.001">
    </testcase>
    <testcase classname="Base Store Utility Functions getById should return undefined for non-existing id" name="Base Store Utility Functions getById should return undefined for non-existing id" time="0.001">
    </testcase>
    <testcase classname="Base Store Utility Functions reset should reset store state" name="Base Store Utility Functions reset should reset store state" time="0.001">
    </testcase>
    <testcase classname="Base Store Utility Functions resetError should reset error state" name="Base Store Utility Functions resetError should reset error state" time="0">
    </testcase>
    <testcase classname="Base Store Context Management getContextKey should return context from localStorage" name="Base Store Context Management getContextKey should return context from localStorage" time="0.001">
    </testcase>
    <testcase classname="Base Store Context Management getContextKey should return default context when no localStorage data" name="Base Store Context Management getContextKey should return default context when no localStorage data" time="0.001">
    </testcase>
    <testcase classname="Base Store Context Management getContextKey should return specific context key" name="Base Store Context Management getContextKey should return specific context key" time="0">
    </testcase>
    <testcase classname="Base Store Context Management getNumberOfFilters should return number of active filters" name="Base Store Context Management getNumberOfFilters should return number of active filters" time="0.002">
    </testcase>
    <testcase classname="Base Store Data Processing parseArrays should parse filters array correctly" name="Base Store Data Processing parseArrays should parse filters array correctly" time="0.001">
    </testcase>
    <testcase classname="Base Store Data Processing parseItem should return item as-is by default" name="Base Store Data Processing parseItem should return item as-is by default" time="0">
    </testcase>
    <testcase classname="Base Store Data Processing parseSortBy should return sort parameters correctly" name="Base Store Data Processing parseSortBy should return sort parameters correctly" time="0">
    </testcase>
    <testcase classname="Base Store Visible Fields Management getVisibleFields should return visible fields from context" name="Base Store Visible Fields Management getVisibleFields should return visible fields from context" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Security API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.199" tests="8">
    <testcase classname="Security API getApiMe should call GET /me endpoint" name="Security API getApiMe should call GET /me endpoint" time="0.002">
    </testcase>
    <testcase classname="Security API getApiMe should handle errors" name="Security API getApiMe should handle errors" time="0.02">
    </testcase>
    <testcase classname="Security API getLongRequest should call GET /getLongRequest/1 endpoint" name="Security API getLongRequest should call GET /getLongRequest/1 endpoint" time="0.002">
    </testcase>
    <testcase classname="Security API login should call POST /login with credentials" name="Security API login should call POST /login with credentials" time="0.001">
    </testcase>
    <testcase classname="Security API login should handle login failure" name="Security API login should handle login failure" time="0.001">
    </testcase>
    <testcase classname="Security API logout should call GET /logout endpoint" name="Security API logout should call GET /logout endpoint" time="0.002">
    </testcase>
    <testcase classname="Security API loadRoleHierarchy should call GET /role_hierarchy endpoint" name="Security API loadRoleHierarchy should call GET /role_hierarchy endpoint" time="0.001">
    </testcase>
    <testcase classname="Security API loadRoleHierarchyMap should call GET /role_hierarchy_map endpoint" name="Security API loadRoleHierarchyMap should call GET /role_hierarchy_map endpoint" time="0">
    </testcase>
  </testsuite>
  <testsuite name="i18n Plugin" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.656" tests="10">
    <testcase classname="i18n Plugin should create i18n instance" name="i18n Plugin should create i18n instance" time="0.002">
    </testcase>
    <testcase classname="i18n Plugin should use Composition API mode" name="i18n Plugin should use Composition API mode" time="0">
    </testcase>
    <testcase classname="i18n Plugin should have correct locale configuration" name="i18n Plugin should have correct locale configuration" time="0">
    </testcase>
    <testcase classname="i18n Plugin should include all required locales" name="i18n Plugin should include all required locales" time="0.014">
    </testcase>
    <testcase classname="i18n Plugin should have messages for all locales" name="i18n Plugin should have messages for all locales" time="0.004">
    </testcase>
    <testcase classname="i18n Plugin should set locale based on environment variable" name="i18n Plugin should set locale based on environment variable" time="0.001">
    </testcase>
    <testcase classname="i18n Plugin should have fallback locale configured" name="i18n Plugin should have fallback locale configured" time="0">
    </testcase>
    <testcase classname="i18n Plugin Locale switching should be able to change locale" name="i18n Plugin Locale switching should be able to change locale" time="0.001">
    </testcase>
    <testcase classname="i18n Plugin Default configuration should use French as default locale when env vars are not set" name="i18n Plugin Default configuration should use French as default locale when env vars are not set" time="0">
    </testcase>
    <testcase classname="i18n Plugin Supported Languages should support European languages" name="i18n Plugin Supported Languages should support European languages" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="axios instance" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:06" time="0.192" tests="4">
    <testcase classname="axios instance exports an axios instance" name="axios instance exports an axios instance" time="0.005">
    </testcase>
    <testcase classname="axios instance axios instance is created through axios.create" name="axios instance axios instance is created through axios.create" time="0.002">
    </testcase>
    <testcase classname="axios instance axios instance has all required methods" name="axios instance axios instance has all required methods" time="0.001">
    </testcase>
    <testcase classname="axios instance axios instance has interceptors" name="axios instance axios instance has interceptors" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Business Sector API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:06" time="0.164" tests="3">
    <testcase classname="Business Sector API should have correct baseUrl" name="Business Sector API should have correct baseUrl" time="0.002">
    </testcase>
    <testcase classname="Business Sector API should inherit all base API methods" name="Business Sector API should inherit all base API methods" time="0.001">
    </testcase>
    <testcase classname="Business Sector API should be a merged object with api_base" name="Business Sector API should be a merged object with api_base" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="AboutView.vue" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:06" time="0.171" tests="3">
    <testcase classname="AboutView.vue is a Vue component" name="AboutView.vue is a Vue component" time="0.002">
    </testcase>
    <testcase classname="AboutView.vue can be imported successfully" name="AboutView.vue can be imported successfully" time="0.001">
    </testcase>
    <testcase classname="AboutView.vue is a valid Vue SFC" name="AboutView.vue is a valid Vue SFC" time="0">
    </testcase>
  </testsuite>
  <testsuite name="User API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.251" tests="14">
    <testcase classname="User API findItemsByType should call GET /utilisateurs with type filter" name="User API findItemsByType should call GET /utilisateurs with type filter" time="0.003">
    </testcase>
    <testcase classname="User API findItemsByType should handle errors when fetching users by type" name="User API findItemsByType should handle errors when fetching users by type" time="0.03">
    </testcase>
    <testcase classname="User API findBy should call GET /utilisateurs with default parameters" name="User API findBy should call GET /utilisateurs with default parameters" time="0.005">
    </testcase>
    <testcase classname="User API findBy should call GET /utilisateurs with active filter" name="User API findBy should call GET /utilisateurs with active filter" time="0.001">
    </testcase>
    <testcase classname="User API findBy should call GET /utilisateurs with role filter" name="User API findBy should call GET /utilisateurs with role filter" time="0.001">
    </testcase>
    <testcase classname="User API findBy should call GET /utilisateurs with both active and role filters" name="User API findBy should call GET /utilisateurs with both active and role filters" time="0">
    </testcase>
    <testcase classname="User API findBy should handle errors when finding users" name="User API findBy should handle errors when finding users" time="0.002">
    </testcase>
    <testcase classname="User API findAllActive should call findBy with active=true" name="User API findAllActive should call findBy with active=true" time="0.001">
    </testcase>
    <testcase classname="User API getCurrentlyLoggedUsers should call GET /getCurrentlyLoggedUsers endpoint" name="User API getCurrentlyLoggedUsers should call GET /getCurrentlyLoggedUsers endpoint" time="0.001">
    </testcase>
    <testcase classname="User API getCurrentlyLoggedUsers should handle errors when fetching currently logged users" name="User API getCurrentlyLoggedUsers should handle errors when fetching currently logged users" time="0.001">
    </testcase>
    <testcase classname="User API getNumberOfCurrentlyLoggedUsers should call GET /getCurrentlyLoggedUsers with countOnly parameter" name="User API getNumberOfCurrentlyLoggedUsers should call GET /getCurrentlyLoggedUsers with countOnly parameter" time="0.001">
    </testcase>
    <testcase classname="User API getNumberOfCurrentlyLoggedUsers should handle errors when fetching user count" name="User API getNumberOfCurrentlyLoggedUsers should handle errors when fetching user count" time="0.01">
    </testcase>
    <testcase classname="User API should have baseUrl property" name="User API should have baseUrl property" time="0">
    </testcase>
    <testcase classname="User API should inherit base API methods" name="User API should inherit base API methods" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Lead Assignment Rule API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:06" time="0.135" tests="2">
    <testcase classname="Lead Assignment Rule API should have correct baseUrl" name="Lead Assignment Rule API should have correct baseUrl" time="0.001">
    </testcase>
    <testcase classname="Lead Assignment Rule API should inherit all base API methods" name="Lead Assignment Rule API should inherit all base API methods" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PageTitle.vue" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:06" time="0.227" tests="3">
    <testcase classname="PageTitle.vue is a Vue component" name="PageTitle.vue is a Vue component" time="0.022">
    </testcase>
    <testcase classname="PageTitle.vue can be imported successfully" name="PageTitle.vue can be imported successfully" time="0">
    </testcase>
    <testcase classname="PageTitle.vue is a valid Vue SFC" name="PageTitle.vue is a valid Vue SFC" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="API Base" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:06" time="0.172" tests="11">
    <testcase classname="API Base should be defined" name="API Base should be defined" time="0.002">
    </testcase>
    <testcase classname="API Base should have CRUD methods" name="API Base should have CRUD methods" time="0.001">
    </testcase>
    <testcase classname="API Base should have pagination method" name="API Base should have pagination method" time="0">
    </testcase>
    <testcase classname="API Base findAll should make GET request" name="API Base findAll should make GET request" time="0.001">
    </testcase>
    <testcase classname="API Base find should make GET request with ID" name="API Base find should make GET request with ID" time="0.01">
    </testcase>
    <testcase classname="API Base add should make POST request" name="API Base add should make POST request" time="0.001">
    </testcase>
    <testcase classname="API Base save should make PATCH request" name="API Base save should make PATCH request" time="0.001">
    </testcase>
    <testcase classname="API Base delete should make DELETE request" name="API Base delete should make DELETE request" time="0">
    </testcase>
    <testcase classname="API Base findPage should make GET request with pagination parameters" name="API Base findPage should make GET request with pagination parameters" time="0.002">
    </testcase>
    <testcase classname="API Base findPage should handle filters correctly" name="API Base findPage should handle filters correctly" time="0">
    </testcase>
    <testcase classname="API Base findPage should handle null filters" name="API Base findPage should handle null filters" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="BaseModel" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:06" time="0.123" tests="16">
    <testcase classname="BaseModel should create a base model instance" name="BaseModel should create a base model instance" time="0.002">
    </testcase>
    <testcase classname="BaseModel should have default properties" name="BaseModel should have default properties" time="0.002">
    </testcase>
    <testcase classname="BaseModel should accept constructor parameters" name="BaseModel should accept constructor parameters" time="0">
    </testcase>
    <testcase classname="BaseModel should handle partial data" name="BaseModel should handle partial data" time="0.001">
    </testcase>
    <testcase classname="BaseModel should handle empty constructor call" name="BaseModel should handle empty constructor call" time="0.001">
    </testcase>
    <testcase classname="BaseModel setValue method should set property value when property exists" name="BaseModel setValue method should set property value when property exists" time="0">
    </testcase>
    <testcase classname="BaseModel setValue method should return false when property does not exist" name="BaseModel setValue method should return false when property does not exist" time="0.001">
    </testcase>
    <testcase classname="BaseModel setNumber method should set number values" name="BaseModel setNumber method should set number values" time="0">
    </testcase>
    <testcase classname="BaseModel setNumber method should handle null values" name="BaseModel setNumber method should handle null values" time="0.001">
    </testcase>
    <testcase classname="BaseModel setNumber method should return false for non-number values" name="BaseModel setNumber method should return false for non-number values" time="0.001">
    </testcase>
    <testcase classname="BaseModel setString method should set string values" name="BaseModel setString method should set string values" time="0">
    </testcase>
    <testcase classname="BaseModel setString method should handle null values" name="BaseModel setString method should handle null values" time="0.001">
    </testcase>
    <testcase classname="BaseModel setString method should return false for non-string values" name="BaseModel setString method should return false for non-string values" time="0.001">
    </testcase>
    <testcase classname="BaseModel setBoolean method should convert and set boolean values" name="BaseModel setBoolean method should convert and set boolean values" time="0.001">
    </testcase>
    <testcase classname="BaseModel setObject method should set object values when defined" name="BaseModel setObject method should set object values when defined" time="0">
    </testcase>
    <testcase classname="BaseModel setObject method should return false for undefined values" name="BaseModel setObject method should return false for undefined values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="vuetify plugin" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:06" time="0.185" tests="9">
    <testcase classname="vuetify plugin can be imported without errors" name="vuetify plugin can be imported without errors" time="0.004">
    </testcase>
    <testcase classname="vuetify plugin exports a vuetify instance" name="vuetify plugin exports a vuetify instance" time="0.001">
    </testcase>
    <testcase classname="vuetify plugin creates vuetify with correct configuration" name="vuetify plugin creates vuetify with correct configuration" time="0.001">
    </testcase>
    <testcase classname="vuetify plugin has MDI icons configured" name="vuetify plugin has MDI icons configured" time="0.001">
    </testcase>
    <testcase classname="vuetify plugin has theme configuration" name="vuetify plugin has theme configuration" time="0.001">
    </testcase>
    <testcase classname="vuetify plugin has components imported" name="vuetify plugin has components imported" time="0">
    </testcase>
    <testcase classname="vuetify plugin has directives imported" name="vuetify plugin has directives imported" time="0.001">
    </testcase>
    <testcase classname="vuetify plugin is a valid Vue plugin" name="vuetify plugin is a valid Vue plugin" time="0">
    </testcase>
    <testcase classname="vuetify plugin vuetify instance can be installed on Vue app" name="vuetify plugin vuetify instance can be installed on Vue app" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="User Store" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:05" time="0.884" tests="7">
    <testcase classname="User Store Store Creation should create store instance with additional user-specific properties" name="User Store Store Creation should create store instance with additional user-specific properties" time="0.006">
    </testcase>
    <testcase classname="User Store Store Creation should expose all base store methods plus custom methods" name="User Store Store Creation should expose all base store methods plus custom methods" time="0.002">
    </testcase>
    <testcase classname="User Store refreshAll should fetch all users and update store" name="User Store refreshAll should fetch all users and update store" time="0.001">
    </testcase>
    <testcase classname="User Store refreshAll should handle errors in refreshAll" name="User Store refreshAll should handle errors in refreshAll" time="0.001">
    </testcase>
    <testcase classname="User Store reset should reset all store state including filtered lists" name="User Store reset should reset all store state including filtered lists" time="0.001">
    </testcase>
    <testcase classname="User Store findByRole should find users by role and update filtered list" name="User Store findByRole should find users by role and update filtered list" time="0.001">
    </testcase>
    <testcase classname="User Store findByRole should handle errors when finding by role" name="User Store findByRole should handle errors when finding by role" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Agency API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:06" time="0.136" tests="4">
    <testcase classname="Agency API findAllActive should call GET /agencies with active filter and country ordering" name="Agency API findAllActive should call GET /agencies with active filter and country ordering" time="0.003">
    </testcase>
    <testcase classname="Agency API findAllActive should handle errors when fetching active agencies" name="Agency API findAllActive should handle errors when fetching active agencies" time="0.014">
    </testcase>
    <testcase classname="Agency API should have baseUrl property" name="Agency API should have baseUrl property" time="0.001">
    </testcase>
    <testcase classname="Agency API should inherit base API methods" name="Agency API should inherit base API methods" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Lead Origin API" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:06" time="0.129" tests="2">
    <testcase classname="Lead Origin API should have correct baseUrl" name="Lead Origin API should have correct baseUrl" time="0.001">
    </testcase>
    <testcase classname="Lead Origin API should inherit all base API methods" name="Lead Origin API should inherit all base API methods" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ErrorMessage.vue" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:06" time="0.16" tests="3">
    <testcase classname="ErrorMessage.vue is a Vue component" name="ErrorMessage.vue is a Vue component" time="0.001">
    </testcase>
    <testcase classname="ErrorMessage.vue can be imported successfully" name="ErrorMessage.vue can be imported successfully" time="0.001">
    </testcase>
    <testcase classname="ErrorMessage.vue is a valid Vue SFC" name="ErrorMessage.vue is a valid Vue SFC" time="0">
    </testcase>
  </testsuite>
  <testsuite name="UserCircle.vue" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="2.202" tests="3">
    <testcase classname="UserCircle.vue is a Vue component" name="UserCircle.vue is a Vue component" time="0.004">
    </testcase>
    <testcase classname="UserCircle.vue can be imported successfully" name="UserCircle.vue can be imported successfully" time="0.001">
    </testcase>
    <testcase classname="UserCircle.vue is a valid Vue SFC" name="UserCircle.vue is a valid Vue SFC" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Security Store" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="2.271" tests="28">
    <testcase classname="Security Store JWT Token Parsing should parse JWT token correctly" name="Security Store JWT Token Parsing should parse JWT token correctly" time="0.009">
    </testcase>
    <testcase classname="Security Store JWT Token Parsing should return null for invalid JWT token" name="Security Store JWT Token Parsing should return null for invalid JWT token" time="0.001">
    </testcase>
    <testcase classname="Security Store Authentication State should return false when no JWT token exists" name="Security Store Authentication State should return false when no JWT token exists" time="0.002">
    </testcase>
    <testcase classname="Security Store Authentication State should return true when JWT token exists" name="Security Store Authentication State should return true when JWT token exists" time="0.001">
    </testcase>
    <testcase classname="Security Store User Information should return user ID from JWT token" name="Security Store User Information should return user ID from JWT token" time="0.001">
    </testcase>
    <testcase classname="Security Store User Information should return user email from JWT token" name="Security Store User Information should return user email from JWT token" time="0.001">
    </testcase>
    <testcase classname="Security Store User Information should return user firstname from JWT token" name="Security Store User Information should return user firstname from JWT token" time="0.001">
    </testcase>
    <testcase classname="Security Store User Information should return user lastname from JWT token" name="Security Store User Information should return user lastname from JWT token" time="0.001">
    </testcase>
    <testcase classname="Security Store User Information should return username from JWT token" name="Security Store User Information should return username from JWT token" time="0.002">
    </testcase>
    <testcase classname="Security Store Role Management should check if user has admin role" name="Security Store Role Management should check if user has admin role" time="0.001">
    </testcase>
    <testcase classname="Security Store Role Management should return false if user is not admin" name="Security Store Role Management should return false if user is not admin" time="0.001">
    </testcase>
    <testcase classname="Security Store Role Management should check if user has specific role" name="Security Store Role Management should check if user has specific role" time="0.001">
    </testcase>
    <testcase classname="Security Store User Impersonation should return true if user is logged as another user" name="Security Store User Impersonation should return true if user is logged as another user" time="0.001">
    </testcase>
    <testcase classname="Security Store User Impersonation should return false if user is not impersonating" name="Security Store User Impersonation should return false if user is not impersonating" time="0">
    </testcase>
    <testcase classname="Security Store User Impersonation should return impersonated user identifier" name="Security Store User Impersonation should return impersonated user identifier" time="0">
    </testcase>
    <testcase classname="Security Store User Impersonation should switch to another user" name="Security Store User Impersonation should switch to another user" time="0.002">
    </testcase>
    <testcase classname="Security Store User Impersonation should reset user switch" name="Security Store User Impersonation should reset user switch" time="0.001">
    </testcase>
    <testcase classname="Security Store Login Process should login successfully" name="Security Store Login Process should login successfully" time="0.001">
    </testcase>
    <testcase classname="Security Store Login Process should handle login error" name="Security Store Login Process should handle login error" time="0.001">
    </testcase>
    <testcase classname="Security Store Logout Process should logout successfully" name="Security Store Logout Process should logout successfully" time="0.001">
    </testcase>
    <testcase classname="Security Store Logout Process should clear session storage on logout" name="Security Store Logout Process should clear session storage on logout" time="0.008">
    </testcase>
    <testcase classname="Security Store Role Hierarchy should load role hierarchy" name="Security Store Role Hierarchy should load role hierarchy" time="0.001">
    </testcase>
    <testcase classname="Security Store Role Hierarchy should load role hierarchy map" name="Security Store Role Hierarchy should load role hierarchy map" time="0.001">
    </testcase>
    <testcase classname="Security Store Session Management should refresh session from storage" name="Security Store Session Management should refresh session from storage" time="0">
    </testcase>
    <testcase classname="Security Store Session Management should disconnect user session through logout" name="Security Store Session Management should disconnect user session through logout" time="0.001">
    </testcase>
    <testcase classname="Security Store API Integration should get user profile from API" name="Security Store API Integration should get user profile from API" time="0.001">
    </testcase>
    <testcase classname="Security Store API Integration should handle API error gracefully" name="Security Store API Integration should handle API error gracefully" time="0.011">
    </testcase>
    <testcase classname="Security Store API Integration should execute long request" name="Security Store API Integration should execute long request" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="App.vue" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="2.276" tests="13">
    <testcase classname="App.vue is a Vue component" name="App.vue is a Vue component" time="0.005">
    </testcase>
    <testcase classname="App.vue renders v-app with correct structure" name="App.vue renders v-app with correct structure" time="0.001">
    </testcase>
    <testcase classname="App.vue displays app title correctly" name="App.vue displays app title correctly" time="0.001">
    </testcase>
    <testcase classname="App.vue shows loading indicator when globalStore.isBackgroundLoading is true" name="App.vue shows loading indicator when globalStore.isBackgroundLoading is true" time="0">
    </testcase>
    <testcase classname="App.vue shows admin controls when user is admin and not logged as another user" name="App.vue shows admin controls when user is admin and not logged as another user" time="0">
    </testcase>
    <testcase classname="App.vue shows switch user controls when logged as another user" name="App.vue shows switch user controls when logged as another user" time="0.001">
    </testcase>
    <testcase classname="App.vue shows user menu when authenticated and not logged as another user" name="App.vue shows user menu when authenticated and not logged as another user" time="0.001">
    </testcase>
    <testcase classname="App.vue displays copyright with current year" name="App.vue displays copyright with current year" time="0.001">
    </testcase>
    <testcase classname="App.vue calls getCopyrightEndDate and returns current year" name="App.vue calls getCopyrightEndDate and returns current year" time="0.001">
    </testcase>
    <testcase classname="App.vue handles environment display correctly" name="App.vue handles environment display correctly" time="0.001">
    </testcase>
    <testcase classname="App.vue generates legacy intranet URL correctly" name="App.vue generates legacy intranet URL correctly" time="0.001">
    </testcase>
    <testcase classname="App.vue handles logout correctly" name="App.vue handles logout correctly" time="0.001">
    </testcase>
    <testcase classname="App.vue component mounts successfully" name="App.vue component mounts successfully" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Router" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="2.435" tests="18">
    <testcase classname="Router is a valid router instance" name="Router is a valid router instance" time="0.007">
    </testcase>
    <testcase classname="Router has routes defined" name="Router has routes defined" time="0.001">
    </testcase>
    <testcase classname="Router has web history mode" name="Router has web history mode" time="0">
    </testcase>
    <testcase classname="Router Route Navigation should navigate to home route" name="Router Route Navigation should navigate to home route" time="0.001">
    </testcase>
    <testcase classname="Router Route Navigation should handle route parameters" name="Router Route Navigation should handle route parameters" time="0">
    </testcase>
    <testcase classname="Router Route Navigation should maintain route state" name="Router Route Navigation should maintain route state" time="0.001">
    </testcase>
    <testcase classname="Router Route Guards should have beforeEach guard configured" name="Router Route Guards should have beforeEach guard configured" time="0">
    </testcase>
    <testcase classname="Router Route Guards should handle route transitions" name="Router Route Guards should handle route transitions" time="0">
    </testcase>
    <testcase classname="Router Route Meta Information should handle routes with meta information" name="Router Route Meta Information should handle routes with meta information" time="0.001">
    </testcase>
    <testcase classname="Router Route Meta Information should support lazy-loaded components" name="Router Route Meta Information should support lazy-loaded components" time="0">
    </testcase>
    <testcase classname="Router Error Handling should handle invalid routes gracefully" name="Router Error Handling should handle invalid routes gracefully" time="0.004">
    </testcase>
    <testcase classname="Router Error Handling should have proper error boundaries" name="Router Error Handling should have proper error boundaries" time="0">
    </testcase>
    <testcase classname="Router Router Configuration should use correct base configuration" name="Router Router Configuration should use correct base configuration" time="0.001">
    </testcase>
    <testcase classname="Router Router Configuration should handle concurrent navigation" name="Router Router Configuration should handle concurrent navigation" time="0">
    </testcase>
    <testcase classname="Router Router Configuration should maintain navigation history" name="Router Router Configuration should maintain navigation history" time="0">
    </testcase>
    <testcase classname="Router Route Matching should match routes correctly" name="Router Route Matching should match routes correctly" time="0.001">
    </testcase>
    <testcase classname="Router Route Matching should handle query parameters" name="Router Route Matching should handle query parameters" time="0.001">
    </testcase>
    <testcase classname="Router Route Matching should handle hash fragments" name="Router Route Matching should handle hash fragments" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="main.ts" errors="0" failures="0" skipped="0" timestamp="2025-09-18T07:46:04" time="2.556" tests="6">
    <testcase classname="main.ts creates Vue app with App component" name="main.ts creates Vue app with App component" time="1.192">
    </testcase>
    <testcase classname="main.ts creates and uses Pinia store" name="main.ts creates and uses Pinia store" time="0.117">
    </testcase>
    <testcase classname="main.ts uses all required plugins in correct order" name="main.ts uses all required plugins in correct order" time="0.094">
    </testcase>
    <testcase classname="main.ts mounts the app to #app element" name="main.ts mounts the app to #app element" time="0.072">
    </testcase>
    <testcase classname="main.ts follows the correct initialization sequence" name="main.ts follows the correct initialization sequence" time="0.07">
    </testcase>
    <testcase classname="main.ts creates app instance and configures it properly" name="main.ts creates app instance and configures it properly" time="0.067">
    </testcase>
  </testsuite>
</testsuites>